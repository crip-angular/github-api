!function(r,e){"use strict";e.githubApi=r.module("crip.gitgub-api",["ngResource","crip.core"])}(angular,window.crip||(window.crip={})),function(r,e){"use strict";function n(e,n){function t(r){return p.config.owner=r,p}function i(r){return p.config.repo=r,p}function o(e,t,i){var o={owner:e||p.config.owner,repo:t||p.config.repo},u=n[i](o);return r.extend(u,{meta:s}),u}function u(r,e){return o(r,e,"get")}function c(r,e){return o(r,e,"latest")}function s(){var n=e.defer(),t={$promise:n.promise,downloads:0};return this.$promise.then(function(e){r.isArray(e)?(e.map(function(r){t.downloads+=a(r.assets)}),n.resolve(t)):(t.downloads=a(e.assets),n.resolve(t))}),t}function a(r){var e=0;return r.map(function(r){return e+=r.download_count,r}),e}var p={config:{owner:!1,repo:!1},owner:t,repo:i,getReleases:u,getLatestRelease:c};return p}e.githubApi.factory("GitHub",n),n.$inject=["$q","GitHubReleases"]}(angular,window.crip||(window.crip={})),function(r,e){"use strict";function n(){function e(){return{apiUrl:n.apiUrl}}var n=this;r.extend(n,{$get:[e],apiUrl:"https://api.github.com"})}e.githubApi.provider("cripGitHubConfig",n),n.$inject=[]}(angular,window.crip||(window.crip={})),function(r,e){"use strict";function n(r,e){var n="{root}/repos/:owner/:repo/releases/:onlyLatest".supplant({root:e.apiUrl});return r(n,{owner:"@owner",repo:"@repo"},{get:{method:"GET",isArray:!0},latest:{method:"GET",params:{onlyLatest:"latest"}}})}e.githubApi.service("GitHubReleases",n),n.$inject=["$resource","cripGitHubConfig"]}(angular,window.crip||(window.crip={}));
//# sourceMappingURL=data:application/json;base64,
